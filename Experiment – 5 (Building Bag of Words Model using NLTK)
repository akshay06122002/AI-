Experiment â€“ 5 (Building Bag of Words Model using NLTK)
 
Aim: To Implement bag of words model using NLTK
Algorithm:
1. Import Libraries:
o Import necessary NLTK modules for tokenization, stop words, and frequency distribution.
2. Preprocessing Function (preprocess_text):
o Tokenizes, converts to lowercase, and removes stopwords from the input text.
3. BoW Model Function (create_bow_model):
o Utilizes preprocess_text for each text in the corpus.
o Counts word frequencies using FreqDist and builds a Bag of Words model.
4. Example Usage:
o An example list of texts is provided in the texts variable.
o The create_bow_model function is called, and the resulting model is printed.
Code :
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk.probability import FreqDist
 
nltk.download('punkt')
nltk.download('stopwords')
 
def preprocess_text(text):
    stop_words = set(stopwords.words('english'))
    word_tokens = word_tokenize(text)
    filtered_words = [word.lower() for word in word_tokens if word.isalpha() and word.lower() not in stop_words]
    return filtered_words
 
def create_bow_model(texts):
    all_words = []
    for text in texts:
        words = preprocess_text(text)
        all_words.extend(words)
 
    word_freq = FreqDist(all_words)
    bow_model = {word: freq for word, freq in word_freq.items()}
    return bow_model
 
# Example usage
texts = [
    "The cat sat on the mat, and the mat was comfortable.",
    "She sang a sweet song, a song that touched everyone's heart.",
    "Coding coding can be challenging, but coding is also incredibly rewarding.",
]
 

bow_model = create_bow_model(texts)
 
# Print the Bag of Words model
print("Bag of Words Model:")
for word, freq in bow_model.items():
    print(f"{word}: {freq}")
 
Output:
Bag of Words Model:
cat: 1
sat: 1
mat: 2
comfortable: 1
sang: 1
sweet: 1
song: 2
touched: 1
everyone: 1
heart: 1
coding: 3
challenging: 1
also: 1
incredibly: 1
rewarding: 1
 
